var mongoose = require('mongoose');
var likesSchema = new mongoose.Schema({
id: {type: Number, index: {unique: true}},
recording_id: Number,
post_id: Number,
user_id: Number
//groups: [String]
});




var Like = mongoose.model('Like', likesSchema);


//Add new Like
exports.create = function(model, requestBody, response) {

	// convert from json data structure to model instance
	var Like = toLike(requestBody, model);
	var id = requestBody.id;
	Like.save(function(error) {
		if (!error) {
			Like.save();
			response.send('Like Added successfully');
		} else {
			console.log(error);
		}
	})
};

//Show all data in Like collection
exports.list = function(model, response) {
	model.find({}, function(error, result) {
		if (error) {
			console.error(error);
			return null;
		}
		if (response != null) {
			// response.setHeader('content-type', 'application/json');
			response.end(JSON.stringify(result))
		}
		return JSON.stringify(result);
	});
}

//Find Like based on argument supplied
exports.findByArg = function(model, arg, val, response) {
	model.findOne({
		arg : val
	}, function(error, result) {
		if (error) {
			console.error(error);
			response.writeHead(500, {
				'Content-Type' : 'text/plain'
			});
			response.end('Internal server error');
			return;
		} else {
			if (!result) {
				if (response != null) {
					response.writeHead(404, {
						'Content-Type' : 'text/plain'
					});
					response.end('Not Found');
				}
				return;
			}
			if (response != null) {
				response.setHeader('Content-Type', 'application/json');
				response.send(result);
			}
			console.log(result);
		}
	});
};

//Find Like By Name
exports.findByName = function(model, requestBody, response) {
	model.find({
		Like : requestBody.Likename
		
	}, function(error, result) {
		if (error) {
			console.error(error);
			response.writeHead(500, {
				'Content-Type' : 'text/plain'
			});
			response.end('Internal server error');
			return;
		} else {
			if (!result) {
				if (response != null) {
					response.writeHead(404, {
						'Content-Type' : 'text/plain'
					});
					response.end('Not Found');
				}
				return;
			}
			if (response != null) {
				response.setHeader('Content-Type', 'application/json');
				response.send(result);
			}
			console.log(result);
		}
	});
}

//Remove Like based on Id given
exports.remove = function(model, arg, response) {

	model.findOne({
		id : arg
	}, function(error, result) {
		if (!error) {
			result.remove();
			response.send('Like Removed successfully');
		} else {
			console.log(error);
		}
	})
};

//convert from json data structure to model instance
function toLike(body, Recording) {
	var id_gen = Math.random() * (10000 - 1) + 1;

	return new Recording({
		id : id_gen,
		recording_id: body.recording_id,
		post_id: body.post_id,
		user_id: body.user_id

	});
}

exports.Like = Like;
