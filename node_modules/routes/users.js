/**
 * this route handles all requests for categories
 */
var http = require('http');
var express = require('express');
var router = express.Router();
// var router = require('router');
var app = express();
var url = require('url');
var mongodb = require("mongodb");
var ObjectID = mongodb.ObjectID;
var users = require('modules/users');
var mongoose = require('mongoose');
var users_service = require('models/users');

var USERS_COLLECTION = "users";

// Create a database variable outside of the database connection callback to
// reuse the connection pool in your app.
var db;

//// Connect to the database before starting the application server.
//mongodb.MongoClient.connect('mongodb://127.0.0.1:27017/users', function(err,
//		database) {
//	if (err) {
//		console.log(err);
//		process.exit(1);
//	}
//
//	// Save database object from the callback for reuse.
//	db = database;
//	console.log("Database connection ready");
//});

// Get Routes

router.get('/users/:id', function(request, response) {
	response.send(JSON.stringify(users.query(request.params.id)))
});

router.get('/', function(request, response) {
	var get_params = url.parse(request.url, true).query;
					if (Object.keys(get_params).length == 2) {
						var arg = get_params.arg;
						var value = get_params.value;
						if (arg != '' && value != '' && arg != null
								&& value != null) {
							users_service.findByArg(users_service.User, arg, value, response);
						} else {
							response
									.send('Hmmmm... something\'s not right, Are you sure you specified the URI in the right format?')
						}

					} else if (Object.keys(get_params).length == 0) {
						// response.send('All Results');
						users_service.list(users_service.User,  response);
					} else {
						response
								.send('Hmmmm... something\'s not right, Are you sure you specified the URI in the right format?')
					}

});
router.post('/sign-up',function(requestBody, response) {
	
	users_service.create(users_service.User, requestBody, response);
});

router.post('/login', function(requestBody, response) {
	
	users_service.Login(users_service.User, requestBody, response);
});

router.get('/remove/:id', function(requestBody, response) {
	
	users_service.remove(users_service.User, requestBody.params.id, response);
});




module.exports = router;